library(tidyverse)
msleep %>%
select(name, genus, sleep_total, awake) %>%
glimpse()
#Add a chunk of columns using start_col:end_col syntax.
msleep %>%
select (name:order, sleep_total:sleep_cycle) %>%
glimpse()
#Deselecting columns and chunk of columns using minus sign.
msleep %>%
select(-conservation, -(sleep_total:awake)) %>%
glimpse()
#Deselecting a whole chunk of columns and re-adding a column.
msleep %>%
select(-(name:awake), conservation) %>%
glimpse()
msleep %>%
select(name, starts_with("sleep")) %>%
glimpse()
#using ends_with (), and contains().
msleep %>%
select(contains("eep"), ends_with("wt")) %>%
glimpse()
###Selecting columns based on regex----
msleep %>%                     #Take msleep dataset, and then
select(matches("o.+er")) %>% #select columns containing "o" and any other letters plus "er"
glimpse()                    #Display results
###Selecting columns Based on Pre-identified Columns----
#set up columns upfront.
classification <- c("name", "genus", "vore", "order", "conservation")
#select the columns that have been set up
msleep %>%
select(!!classification)
msleep %>%                  # Take msleep dataset, and then...
select_if(is.numeric) %>% # Select numeric variable, and then...
glimpse                   # Display results.
#Using select_if() to select_if() to select factor
msleep %>%
select_if(is.factor) %>%
glimpse
#Using select_if() to select character variables.
msleep %>%
select_if(is.character) %>%
glimpse()
#Selecting the negation of a statement using tilde.
msleep %>%
select_if(~!is.numeric(.)) %>%
glimpse()
###Selecting Columns By Logical Expressions using select_if()----
#Select columns with a mean above 500
#Long version
msleep %>%
###Selecting Columns By Logical Expressions using select_if()----
#Select columns with a mean above 500
#Long version
msleep %>%
select_if(is.numeric) %>%
select_if(~mean(., na.rm = TRUE)>500) %>%
glimpse()
###Selecting Columns By Logical Expressions using select_if()----
#Select columns with a mean above 500
#Long version
msleep %>%
select_if(is.numeric) %>%
select_if(~mean(., na.rm = TRUE)>500) %>%
glimpse()
###Selecting Columns By Logical Expressions using select_if()----
#Select columns with a mean above 500
#Long version
msleep %>%
select_if(is.numeric) %>%
select_if(~mean(., na.rm = TRUE)>10) %>%
glimpse()
#Shorter version of the above code.
msleep %>%
select_if(~is.numeric(.) & mean(., na.rm = TRUE)>10) %>%
glimpse()
msleep %>%
select_if(~n_distinct(.) < 10)
library(tidyverse)
msleep %>%                                     #Take msleep dataset, and then...
select(conservation, sleep_total, name) %>%  #Select variables of interest.
glimpse()                                    # Display results.
msleep %>%                                            #Take msleep dataset, and then...
select(conservation, sleep_total, everything()) %>% # Move conservation and sleep total to the front, and add all the remaining columns.
glimpse()                                           # Display results.
msleep %>%                                                               #Take msleep dataset, and then...
select(animal=name, sleep_total, extinction_threat = conservation) %>% # Rename name variable as animal, and conservation as extinction threat within select()
glimpse                                                                # Display results
#2.) Using rename().
msleep %>%                                                #Take msleep dataset, and then...
rename(animal=name, extinction_threat=conservation) %>% # Rename variables of interest
glimpse()                                               # Display results.
msleep %>%                  #Take msleep dataset, and then...
select_all(toupper) %>%   # Change all Variable names to uppercase.
msleep %>%                  #Take msleep dataset, and then...
select_all(toupper) %>%   # Change all Variable names to uppercase.
glimpse()
msleep %>%                  #Take msleep dataset, and then...
select_all(toupper) %>%   # Change all Variable names to uppercase.
glimpse()
#Cleaning up white spaces in messy data----
#Let's make an unclean database with the inbuilt dataset.
msleep2 <- select(msleep, name, sleep_total, brainwt)
colnames(msleep2) <- c("name", "sleep total", "brain weight")
msleep2
msleep2 %>%                            #Take msleep2 dataset, and then...
select_all(~str_replace(., "", "_")) # Replace white spaces with underscore using str_replace all()
msleep2 %>%                            #Take msleep2 dataset, and then...
select_all(~str_replace(., "", "_")) # Replace white spaces with underscore using str_replace all()
msleep2 %>%                            #Take msleep2 dataset, and then...
select_all(~str_replace(., "", "_")) # Replace white spaces with underscore using str_replace all()
# Cleaning up white spaces in messy data----
# Let's make an unclean database with the inbuilt dataset.
msleep2 <- select(msleep, name, sleep_total, brainwt)
msleep2 %>%                            #Take msleep2 dataset, and then...
select_all(~str_replace(., "", "_")) # Replace white spaces with underscore using str_replace all()
msleep2 %>%                            #Take msleep2 dataset, and then...
select_all(~str_replace(., " ", "_")) # Replace white spaces with underscore using str_replace all()
msleep2 <- select(msleep, name, sleep_total, brainwt)
colnames(msleep2) <- c("Q1 name", "Q2 sleep total", "Q3 brain weight")
msleep2[1:3,]
#Let's now clean up the messy dataset using select_all() in combination with str_replace().
msleep2 %>%
select_all(~str_replace(., "Q[0-9]+", "")) %>%
select_all(~str_replace(., " ", "_"))
#Let's now clean up the messy dataset using select_all() in combination with str_replace().
msleep2 %>%
select_all(~str_replace(., "Q[0-9]+", "")) %>%
select_all(~str_replace(., " ", "_"))
#LOAD THE REQUIRED PACKAGE(S)----
library(tidyverse)
###Load the inbuilt Dataset from Package(s)----
#Reordering columns----
#1) Using select()
msleep %>%                                     #Take msleep dataset, and then...
select(conservation, sleep_total, name) %>%  #Select variables of interest.
glimpse()                                    # Display results.
# Note that the order of selection determines\
#final order
#2) Using everything()
#The function is very useful if your are just moving a few columns to the front\
#and then wish to add the remaining columns. It saves a lot of typing.
msleep %>%                                            #Take msleep dataset, and then...
select(conservation, sleep_total, everything()) %>% # Move conservation and sleep total to the front, and add all the remaining columns.
glimpse()                                           # Display results.
###Renaming Columns----
#1.) Using select().
msleep %>%                                                               #Take msleep dataset, and then...
select(animal=name, sleep_total, extinction_threat = conservation) %>% # Rename name variable as animal, and conservation as extinction threat within select()
glimpse                                                                # Display results
#2.) Using rename().
msleep %>%                                                #Take msleep dataset, and then...
rename(animal=name, extinction_threat=conservation) %>% # Rename variables of interest
glimpse()                                               # Display results.
# Note that the rename function retains all the columns in the results
###Reformatting all Column Names----
#To do this, you use the select_all() function. This function allows changes to all columns\
# and takes a function as an argument.
#1.) Change all Column nAmes to Upper Case.
msleep %>%                  #Take msleep dataset, and then...
select_all(toupper) %>%   # Change all Variable names to uppercase.
glimpse()                 # Display results
### Cleaning up white spaces in messy data----
# Let's make an unclean database with the inbuilt dataset.
msleep2 <- select(msleep, name, sleep_total, brainwt)
colnames(msleep2) <- c("name", "sleep total", "brain weight")
msleep2
# Note that the displayed dataset violates the rules of tidy data. It contains white spaces in variable names.
# Let's now clean up this messy dataset to conform to the rules of tidy data.
msleep2 %>%                            #Take msleep2 dataset, and then...
select_all(~str_replace(., " ", "_")) # Replace white spaces with underscore using str_replace all()
###Cleaning up messy data that contains meta-data like question numbers----
#Let's make an unclean datatset with the inbuilt dataset
msleep2 <- select(msleep, name, sleep_total, brainwt)
colnames(msleep2) <- c("Q1 name", "Q2 sleep total", "Q3 brain weight")
msleep2[1:3,]
#Let's now clean up the messy dataset using select_all() in combination with str_replace().
msleep2 %>%
select_all(~str_replace(., "Q[0-9]+", "")) %>%
select_all(~str_replace(., " ", "_"))
###Row names to columns----
# Note that you may sometimes encounter dataframes that have row names that are not actually columns\
# an example of such a dataframe is the mtcars dataset.
mtcars %>%
head()
mtcars %>%
tibble:rownames_to_column("car_model") %>%
head()
mtcars %>%
tibble::rownames_to_column("car_model") %>%
head()
